//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.239.
// 
#pragma warning disable 1591

namespace MLifterErrorHandler.ErrorReportService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ErrorReportServiceSoap", Namespace="http://www.memorylifter.com/ErrorReportService/")]
    public partial class ErrorReportService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback TransferStartOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransferChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransferFinishOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ErrorReportService() {
            this.Url = global::MLifterErrorHandler.Properties.Settings.Default.MLifterErrorHandler_ErrorReportService_ErrorReportService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event TransferStartCompletedEventHandler TransferStartCompleted;
        
        /// <remarks/>
        public event TransferChunkCompletedEventHandler TransferChunkCompleted;
        
        /// <remarks/>
        public event TransferFinishCompletedEventHandler TransferFinishCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.memorylifter.com/ErrorReportService/TransferStart", RequestNamespace="http://www.memorylifter.com/ErrorReportService/", ResponseNamespace="http://www.memorylifter.com/ErrorReportService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TransferStart(string filename, int filesize, int chunksize, string sender, string senderMessage, string stackTrace) {
            object[] results = this.Invoke("TransferStart", new object[] {
                        filename,
                        filesize,
                        chunksize,
                        sender,
                        senderMessage,
                        stackTrace});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TransferStartAsync(string filename, int filesize, int chunksize, string sender, string senderMessage, string stackTrace) {
            this.TransferStartAsync(filename, filesize, chunksize, sender, senderMessage, stackTrace, null);
        }
        
        /// <remarks/>
        public void TransferStartAsync(string filename, int filesize, int chunksize, string sender, string senderMessage, string stackTrace, object userState) {
            if ((this.TransferStartOperationCompleted == null)) {
                this.TransferStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferStartOperationCompleted);
            }
            this.InvokeAsync("TransferStart", new object[] {
                        filename,
                        filesize,
                        chunksize,
                        sender,
                        senderMessage,
                        stackTrace}, this.TransferStartOperationCompleted, userState);
        }
        
        private void OnTransferStartOperationCompleted(object arg) {
            if ((this.TransferStartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferStartCompleted(this, new TransferStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.memorylifter.com/ErrorReportService/TransferChunk", RequestNamespace="http://www.memorylifter.com/ErrorReportService/", ResponseNamespace="http://www.memorylifter.com/ErrorReportService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TransferChunk(string filename, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] content, int partcount) {
            object[] results = this.Invoke("TransferChunk", new object[] {
                        filename,
                        content,
                        partcount});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TransferChunkAsync(string filename, byte[] content, int partcount) {
            this.TransferChunkAsync(filename, content, partcount, null);
        }
        
        /// <remarks/>
        public void TransferChunkAsync(string filename, byte[] content, int partcount, object userState) {
            if ((this.TransferChunkOperationCompleted == null)) {
                this.TransferChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferChunkOperationCompleted);
            }
            this.InvokeAsync("TransferChunk", new object[] {
                        filename,
                        content,
                        partcount}, this.TransferChunkOperationCompleted, userState);
        }
        
        private void OnTransferChunkOperationCompleted(object arg) {
            if ((this.TransferChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferChunkCompleted(this, new TransferChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.memorylifter.com/ErrorReportService/TransferFinish", RequestNamespace="http://www.memorylifter.com/ErrorReportService/", ResponseNamespace="http://www.memorylifter.com/ErrorReportService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TransferFinish(string filename, int partcount) {
            object[] results = this.Invoke("TransferFinish", new object[] {
                        filename,
                        partcount});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TransferFinishAsync(string filename, int partcount) {
            this.TransferFinishAsync(filename, partcount, null);
        }
        
        /// <remarks/>
        public void TransferFinishAsync(string filename, int partcount, object userState) {
            if ((this.TransferFinishOperationCompleted == null)) {
                this.TransferFinishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferFinishOperationCompleted);
            }
            this.InvokeAsync("TransferFinish", new object[] {
                        filename,
                        partcount}, this.TransferFinishOperationCompleted, userState);
        }
        
        private void OnTransferFinishOperationCompleted(object arg) {
            if ((this.TransferFinishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferFinishCompleted(this, new TransferFinishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TransferStartCompletedEventHandler(object sender, TransferStartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransferStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TransferChunkCompletedEventHandler(object sender, TransferChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransferChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TransferFinishCompletedEventHandler(object sender, TransferFinishCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferFinishCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransferFinishCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591